#!ena.vec.with_capacity allocates a vector of given size
ena.vec.with_capacity {
	capacity ( unit )
	capacity =
	mem ( 3 units )
	capacity @ mem =

	0 mem 1 + =
	capacity @ units mem 2 + =

	mem
}

#!ena.vec.cap returns capacity of given vector
ena.vec.cap {
	@
}

#!ena.vec.size returns size of given vector
ena.vec.size {
	1 + @
}

#!ena.vec.begin returns the pointer to the beginning of array
ena.vec.begin {
	2 + @
}

#!ena.vec.in_bounds? checks if an index is in bounds
#!arguments: vector index
ena.vec.in_bounds? {
	ena.vec.size swap <
}

#!ena.vec.unsafe_ptr_at returns a pointer to an element with given index
ena.vec.unsafe_ptr_at {
	vec ( unit )
	position ( unit )
	vec = 
	position = 
 	position @ vec @ ena.vec.in_bounds? ! if {
		null return
	}
	vec @ ena.vec.begin position @ +
}

#!ena.vec.at returns value at given index
ena.vec.at {
	ena.vec.unsafe_ptr_at @
}

#!ena.vec.reverse reverses the vector
ena.vec.reverse {
	initial ( unit )
	initial =
	new_vec ( unit )
	initial @ ena.vec.cap ena.vec.with_capacity new_vec =
	len ( unit )
	initial @ ena.vec.size len =
	i ( unit )
	0 i =
	cond {
		len @ i @ <
	}

	cond while {
		1 i @ len @ - - initial @ ena.vec.at
		new_vec @ ena.vec.push 
		i @ 1 + i =
		cond
	}

	new_vec @
}

#!ena.vec.push pushes a value to the vector
ena.vec.push {
	vec ( unit )
	vec =
	el ( unit )
	el =
	vec @ ena.vec.size vec @ ena.vec.cap <= if {
		vec @ ena.vec.realloc
	} 

	vec @ ena.vec.size  1 +
	vec @ 1 + =
	vec @ ena.vec.begin 1 vec @ ena.vec.size -
	+ el @ swap =
}

#!ena.vec.realloc reallocates a vector doubling its capacity
ena.vec.realloc {
	pointer ( unit )
	pointer =

	pointer @ ena.vec.cap 2 *
	dup pointer @ =
	pointer @ ena.vec.begin
	unsafe_realloc
	pointer @ 2 + =
}

#!ena.vec.each runs given block for each element in the vector
#!arguments: block vector
ena.vec.each {
	vector ( unit )
	vector =
	block ( unit )
	block =
	len ( unit )
	vector @ ena.vec.size len =
	i ( unit )
	0 i =

	cond {
		len @ i @ <
	}

	cond while {
		i @ vector @ ena.vec.at
		block @ call
		i @ 1 + i =
		cond
	}
}

#!ena.vec.unwrap unwraps all elements of vector onto the stack
ena.vec.unwrap {
	vector ( unit )
	vector =
	i ( unit )
	len ( unit )
	vector @ ena.vec.size len =
	0 i =
	cond {
		len @ i @ <
	}

	cond while {
		i @ vector @ ena.vec.at
		i @ 1 + i =
		cond
	}

	len @
}

#!ena.vec.from_stack is the opposite of ena.vec.unwrap
ena.vec.from_stack {
	len ( unit )
	vector ( unit )
	len =
	len @ ena.vec.with_capacity vector =

	i ( unit )
	0 i =

	cond {
		len @ i @ <
	}

	cond while {
		vector @ ena.vec.push
		i @ 1 + i =
		cond
	}

	vector @
}

ena.vec {
	1 ena.vec.with_capacity
}
